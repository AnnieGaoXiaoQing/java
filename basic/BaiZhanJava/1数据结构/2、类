1、抽象方法和抽象类
   抽象方法：仅声明，没有方法体（就是告诉子类，必须要给抽象方法提供具体的实现）
   抽象类：包含抽象方法，通过abstract方法定义规范，然后要求子类必须定义具体实现。
   注：
      通过抽象类，我们可以做到严格限制子类的设计，使子类之间更加通用
   抽象类使用要点：
      a、有抽象方法的类只能定义成抽象类
      b、抽象类不能实例化，即不能用new来实例化抽象类
      c、抽象类可以保护属性、方法、构造方法。但是构造方法不能用来new，只能用来被子类调用
      d、抽象类只能用来被继承
      e、抽象方法必须被子类实现
   抽象类的意义：为子类提供统一的、规范的模板。子类必须实现相关的抽象方法
2、接口
   接口就是规范
   详细说明：
        访问修饰符：只能是public或者默认
        接口名：和类名采用相同命名机制
        extends：接口可以多继承
        常量：接口中属性只能是常量（总是被public static final 修饰，不写也是）
        方法：接口中的方法只能是：public abstrac（不写也是）
3、内部类
    a、成员内部类：包括静态和非静态内部类
       非静态内部类：
           非静态内部类必须寄存在一个外部类对象里
           非静态内部类可以直接访问外部类的成员，但是外部类不能直接访问非静态内部类
           非静态内部类不能有静态方法/静态属性和静态初始化块
           外部类的静态方法、静态代码块不能访问非静态内部类，包括不能使用非静态内部类定义变量、创建实例
        静态内部类：用static修饰
           当一个静态内部类对象存在，并不一定存在对应的外部类对象。因此静态内部类的实例方法不能直接访问外部类的实例方法
           静态内部类看做外部类的一个静态成员。因此，外部类的方法中可以通过:"静态内部类.名字" 的方式访问静态内部类的静态成员，通过new静态内部类()访问静态内部类的实例
    b、匿名内部类：适合那种只需要使用一次的类。比如：键盘监听操作。安卓会经常用到
    c、局部内部类：很少用到，定义在方法内部，作用域只限于本方法，称为局部内部类

